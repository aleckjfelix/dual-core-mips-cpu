`timescale 1ns / 1ps

module exmemory #(parameter WIDTH=8, parameter ADDR_WIDTH=10) (
    input clk,
    input memwrite,
    input [ADDR_WIDTH-1 : 0] adr,
    input [WIDTH-1 : 0] writedata,
    output reg [WIDTH-1 : 0] memdata
    );
    
    reg [31:0] RAM [(1<<(ADDR_WIDTH-2))-1 : 0];
    wire [31:0] word;
    assign word = RAM[adr >> 2];
    
    initial begin
        //$readmemh("memfile.dat", RAM);
        /*RAM[0] = 32'b001000_00000_00001_0000000000000001;
        RAM[1] = 32'b001000_00000_00010_0000000000000001;
        RAM[2] = 32'b000000_00001_00010_00011_00000_100000;
        RAM[3] = 32'b000000_00011_00010_00010_00000_100000;
        RAM[4] = 32'b000000_00011_00010_00011_00000_100000;
        RAM[5] = 32'b000000_00010_00000_00010_00000_110000;
        RAM[6] = 32'b110000_00000_00011_0000000010000000;
        RAM[7] = 32'b000010_00000_0000000000010_00000011;*/
        
        RAM[0] <= 32'b100000_00000_00001_0000000001000000; //Load input
        RAM[1] <= 32'b001000_00000_00010_0000000000000001; //Set constants
        RAM[2] <= 32'b001000_00000_00011_0000000000000001;
        RAM[3] <= 32'b001000_00000_00100_0000000000000001;
        RAM[4] <= 32'b001000_00000_00101_0000000000000010;
        RAM[5] <= 32'b000100_00001_00101_0000000000000101; //Test for 1 left
        RAM[6] <= 32'b000100_00001_00100_0000000000000101; //Test for 0 left
        RAM[7] <= 32'b000000_00001_00101_00001_00000_100010; //add
        RAM[8] <= 32'b000000_00010_00011_00010_00000_100000; //add
        RAM[9] <= 32'b000000_00010_00011_00011_00000_100000; //subtract 2 from counter
        RAM[10] <= 32'b000010_00000_0000000000010_00000101; //Jump back to start of loop
        RAM[11] <= 32'b000000_00010_00011_00011_00000_100000;
        RAM[12] <= 32'b110000_00000_00011_0000000001000000; //write lower 8 of output
        RAM[13] <= 32'b000000_00011_00000_00011_00000_110001; //constant shift 
        RAM[14] <= 32'b110000_00000_00011_0000000001000001; //write upper 8 of output
        RAM[15] <= 32'b000010_00000_0000000000010_00001111; //Halt
        
        RAM[64] <= 32'b001000_00000_00001_0000000000000001;
        RAM[65] <= 32'b001000_00000_00010_0000000000000001;
        RAM[66] <= 32'b001000_00000_00100_0000000000001000;
        RAM[67] <= 32'b000000_00001_00010_00011_00000_100000;
        RAM[68] <= 32'b000000_00011_00010_00010_00000_100000;
        RAM[69] <= 32'b000000_00011_00010_00011_00000_100000;
        RAM[70] <= 32'b000000_00011_00100_00101_00000_100010;
        RAM[71] <= 32'b000100_00010_00100_0000000000000001;
        RAM[72] <= 32'b000010_00000_0000000000010_00000100;
        RAM[73] <= 32'b001000_00000_00111_00000010_00000001;
        RAM[74] <= 32'b000010_00000_0000000000010_00001010;
    end
    always @(posedge clk) begin
        if(memwrite) begin
            case(adr[1:0])
                2'b00: RAM[adr >> 2][7:0] <= writedata;
                2'b01: RAM[adr >> 2][15:8] <= writedata;
                2'b10: RAM[adr >> 2][23:16] <= writedata;
                2'b11: RAM[adr >> 2][31:24] <= writedata;
            endcase
        end
    end
    always @(*) begin
        case(adr[1:0])
            2'b00: memdata <= word[7:0];
            2'b01: memdata <= word[15:8];
            2'b10: memdata <= word[23:16];
            2'b11: memdata <= word[31:24];
        endcase
    end
endmodule
